spring:
  application:
    name: ${SPRING_APP_NAME:user-service}
  # Use the modern 'spring.config.import' to declaratively load secrets from Vault.
  # This is cleaner and more powerful than the old property-based approach.
  config:
    import:
      - vault://secret/data/db/userdb/dev
      - vault://secret/data/ms/security/auth/dev
      - vault://secret/data/api/keys/dev

  devtools:
    restart:
      enabled: true

  # Enable Virtual Threads
  threads:
    virtual:
      enabled: true

  # Jackson JSON mapper
  jackson:
    mapper:
      accept-case-insensitive-properties: true

  # API Gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true # Automatic Routing of API Gateway
    # Vault Configuration
    vault:
      host: ${VAULT_HOST:localhost}
      port: ${VAULT_PORT:8200}
      scheme: http
      authentication: TOKEN
      token: ${VAULT_TOKEN:srikanth}
      kv:
        enabled: true
        backend: secret
        profile-separator: /
      # Enable retry for connecting to Vault on startup. This is crucial for handling
      # the race condition where the application starts before Vault is ready.
      config:
        retry:
          enabled: true
          max-attempts: 15
          initial-interval: 2000 # 2 seconds

  # JPA Hibernate
  # https://medium.com/@rihab.beji099/hibernate-schema-management-get-it-right-fast-spring-jpa-hibernate-ddl-auto-cfd86830daa2
  jpa:
    hibernate: # create/update/validate/create-drop/none
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
    #      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:validate}
    defer-datasource-initialization: false
    properties:
      hibernate:
        show_sql: ${SPRING_JPA_HIBERNATE_SHOW_SQL:false}
        format_sql: ${SPRING_JPA_HIBERNATE_FORMAT_SQL:false}
    sql:
      init:
        mode: always
  datasource:
    username: ${user}
    password: ${password}
    url: ${SPRING_DATASOURCE_URL:jdbc:mariadb://mariadb:3306/${db-name}?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC}

  # Flyway
  flyway:
    userDomain: ${flw-user}
    password: ${flw-password}
    sql-migration-prefix: V
    repeatable-sql-migration-prefix: R
    sql-migration-separator: __
    sql-migration-suffixes: .sql

  # Security and Password Encoders
  security:
    userDomain:
      name: ${auth-user}
      password: ${auth-password}
    password:
      encoder: delegating  # or 'argon2-only' for new apps
      argon2:
        memory-cost: 65536    # 64MB
        time-cost: 3          # iterations
        parallelism: 1        # threads
      bcrypt:
        cost: 12              # ~250ms on modern hardware

  # Session
  servlet:
    session:
      timeout: ${USER_SESSION_TIMEOUT:5m}

  # Swagger/Open API
  # http://localhost:9121/swagger-ui/index.html
  doc:
    api-docs:
      path: /api-docs
    swagger-ui:
      operationsSorter: method
    show-actuator: true

jwt-expiry-ttl: ${KEY_SECRET_TTL:700000}
api-key: ${api-key}
# keys used with HMAC-SHA algorithms MUST have a size >= 256 bits
# (the key size must be greater than or equal to the hash output size)
key-secret: ${key-secret}

server:
  port: ${SERVER_PORT:9121}

# Eureka Service Discovery
eureka:
  client:
    serviceUrl:
      defaultZone: ${EUREKA_CLIENT_SERVICE_URL_DEFAULT_ZONE:http://eureka-discovery-service:9111/eureka}
  instance:
    instance-id: "${spring.application.name}:${spring.application.instance_id:${random.value}}"

# Logging Config
logging:
  level:
    root: ${ROOT_LOG_LEVEL:info}
    #    userDomain: debug
    #    org.springframework.web: ERROR
    org:
      hibernate: info
      hibernate.type.descriptor.sql: info
    org.springframework.security: ${SPRING_SECURITY_LOG_LEVEL:info}  # Remove in production
  pattern:
    level: ${LOG_PATTERN_CONSOLE:%green(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %blue(-%5level) %red([%thread]) %magenta(---){faint} %yellow(%logger{15}) - %msg%n}
#    console: "%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg%n"
#  file:
#    name: logs/user-service.log
#    max-size: 10MB
#    max-history: 10
#  org.springframework:
#    web:
#      filter:
#        CommonsRequestLoggingFilter: DEBUG

# Actuator Config
management:
  endpoints:
    web:
      exposure:
        include: health, info, beans, env, metrics, auditevents, httptrace, loggers, threaddump
  endpoint:
    health:
      show-details: always
  info:
    env:
      enabled: true
    build:
      enabled: true
    git:
      enabled: true
      mode: full
    java:
      enabled: true
    os:
      enabled: true

info:
  app:
    name: ${spring.application.name}
    description: "Example User microservice"
#    version: "1.0.0"
#    author: "Srikanth"
#    docs: "http://skakumanu.dev"
